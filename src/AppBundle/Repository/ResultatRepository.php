<?php

namespace AppBundle\Repository;

/**
 * ResultatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResultatRepository extends \Doctrine\ORM\EntityRepository
{
	public function getGlobalResultats()
	{
		return $this->createQueryBuilder('r')
			->leftJoin('r.candidat', 'ca')
			->leftJoin('r.commune', 'c')
			->leftJoin('c.departement', 'd')
			->leftJoin('d.region', 'reg')
			->select('ca, count(r.nbVoix)')
			->groupBy('ca')
			->getQuery()
			->getResult();
	}

	public function getGlobalResultatsRegion()
	{
		return $this->createQueryBuilder('r')
			->leftJoin('r.candidat', 'ca')
			->leftJoin('r.commune', 'c')
			->leftJoin('c.departement', 'd')
			->leftJoin('c.mention', 'm')
			->leftJoin('d.region', 'reg')
			->select('ca, SUM(r.nbVoix) as nb_voix, SUM(m.inscrits) as nb_inscrits, SUM(m.votants) as nb_votants, c, d, reg, r as result')
			->groupBy('ca, reg')
			->getQuery()
			->getResult();

	}


	public function getResultsByCandidat($candidat)
	{
		return $this->createQueryBuilder('r')
			->leftJoin('r.candidat', 'ca')
			->leftJoin('r.commune', 'c')
			->leftJoin('c.departement', 'd')
			->leftJoin('c.mention', 'm')
			->select('ca, SUM(r.nbVoix) as nb_voix, SUM(m.inscrits) as nb_inscrits, SUM(m.votants) as nb_votants, c, d, r as result')
			->where('ca = :candidat')->setParameter('candidat', $candidat)
			->groupBy('ca, d')
			->getQuery()
			->getResult();
	}

	public function getResultatsRegion($region)
	{
		return $this->createQueryBuilder('r')
			->leftJoin('r.candidat', 'ca')
			->leftJoin('r.commune', 'c')
			->leftJoin('c.departement', 'd')
			->leftJoin('c.mention', 'm')
			->leftJoin('d.region', 'reg')
			->select('ca, SUM(r.nbVoix) as nb_voix, SUM(m.inscrits) as nb_inscrits, SUM(m.votants) as nb_votants, c, d, r as result')
			->where('reg = :region')->setParameter('region', $region)
			->groupBy('ca, d')
			->getQuery()
			->getResult();

	}

	public function getResultatsDpt($dpt)
	{
		return $this->createQueryBuilder('r')
			->leftJoin('r.candidat', 'ca')
			->leftJoin('r.commune', 'c')
			->leftJoin('c.departement', 'd')
			->leftJoin('c.mention', 'm')
			->select('ca, SUM(r.nbVoix) as nb_voix, SUM(m.inscrits) as nb_inscrits, SUM(m.votants) as nb_votants, c, d, r as result')
			->where('d = :dpt')->setParameter('dpt', $dpt)
			->groupBy('ca, c')
			->getQuery()
			->getResult();

	}

	public function getResultatsCommune($commune)
	{
		return $this->createQueryBuilder('r')
			->leftJoin('r.candidat', 'ca')
			->leftJoin('r.commune', 'c')
			->leftJoin('c.mention', 'm')
			->select('ca, SUM(r.nbVoix) as nb_voix, SUM(m.inscrits) as nb_inscrits, SUM(m.votants) as nb_votants, c, r as result')
			->where('c = :commune')->setParameter('commune', $commune)
			->groupBy('ca, c')
			->getQuery()
			->getResult();

	}

	public function getGlobalResultatsDepartement($region)
	{
		return $this->createQueryBuilder('r')
			->leftJoin('r.candidat', 'ca')
			->leftJoin('r.commune', 'c')
			->leftJoin('c.departement', 'd')
			->leftJoin('d.region', 'reg')
			->select('ca, SUM(r.nbVoix) as nb_voix, c, d, reg, r as result')
			->where('reg = :region')->setParameter('region', $region)
			->groupBy('ca, departement')
			->getQuery()
			->getResult();

	}

	public function getGlobalResultatsCommune($departement)
	{
		return $this->createQueryBuilder('r')
			->leftJoin('r.candidat', 'ca')
			->leftJoin('r.commune', 'c')
			->leftJoin('c.departement', 'd')
			->leftJoin('d.region', 'reg')
			->select('ca, SUM(r.nbVoix) as nb_voix, c, d, reg, r as result')
			->where('reg = :departement')->setParameter('departement', $departement)
			->groupBy('ca, commune')
			->getQuery()
			->getResult();

	}
}
